<?php

namespace App\Services;

use App\Models\User;
use App\Models\TgSession;
use App\Models\TaroReading;
use App\Models\NumerologyReading;
use Carbon\Carbon;
use Illuminate\Support\Str;

class ChatService
{
    public function __construct(
        protected TgService $tg,
        protected AIService $ai
    ) {}

    /**
     * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–¥–µ–π—Ç–∞ (–≤–µ–±—Ö—É–∫)
     */
    public function handleUpdate(array $update)
    {
        // –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        $message = $update['message'] ?? null;
        if (!$message) return;

        $chatId = $message['chat']['id'];
        $text = trim($message['text'] ?? '');

        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $session = TgSession::firstOrCreate(['chat_id' => $chatId], ['state' => 'start', 'data' => []]);
        $data = $session->data ?? [];

        $user = User::firstOrCreate(['chat_id' => $chatId]);

        // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        switch ($session->state) {
            case 'start':
                $this->showWelcome($chatId);
                $session->state = 'ask_consent';
                break;

            case 'ask_consent':
                if ($this->isPositive($text)) {
                    $this->tg->sendMessage($chatId,
                        "–°–ø–∞—Å–∏–±–æ ‚ù§Ô∏è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è (–ù–∞–ø–∏—à–∏ –∏–º—è, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è):");
                    $session->state = 'ask_name';
                } else {
                    $this->tg->sendMessage($chatId, "–ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å.", [['–°—Ç–∞—Ä—Ç']]);
                }
                break;

            case 'ask_name':
                if (empty($text)) {
                    $this->tg->sendMessage($chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞).");
                    break;
                }
                $user->name = mb_substr($text, 0, 100);
                $user->save();

                $this->tg->sendMessage($chatId, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {$user->name}! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì");
                $session->state = 'ask_birth_date';
                break;

            case 'ask_birth_date':
                if (!$this->validateDate($text)) {
                    $this->tg->sendMessage($chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08.09.1990).");
                    break;
                }
                $user->birth_date = Carbon::createFromFormat('d.m.Y', $text)->toDateString();
                $user->save();

                $this->showMainMenu($chatId, $user);
                $session->state = 'main_menu';
                break;

            case 'main_menu':
                $this->routeMainMenu($session, $user, $chatId, $text);
                break;

            case 'taro_menu':
                // –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–ª–∏ –Ω–∞–∑–∞–¥
                $this->routeTaroMenu($session, $user, $chatId, $text);
                break;

            case 'taro_ask_question':
                // –û–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
                $this->handleTaroQuestion($session, $user, $chatId, $text);
                break;

            case 'numerology_ask_surname':
                if (empty($text)) {
                    $this->tg->sendMessage($chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é.');
                    break;
                }
                $user->surname = mb_substr($text, 0, 100);
                $user->save();

                $this->showNumerologyMenu($chatId, $user);
                $session->state = 'numerology_menu';
                break;

            case 'numerology_menu':
                $this->routeNumerologyMenu($session, $user, $chatId, $text);
                break;

            default:
                // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                $this->showMainMenu($chatId, $user);
                $session->state = 'main_menu';
                break;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        $session->data = $data;
        $session->save();
    }

    /* ---------- Helper methods ---------- */

    protected function showWelcome(int $chatId)
    {
        $text = "–ü—Ä–∏–≤–µ—Ç, —è –≠–ª—å–∑–∞ ‚Äî —Ç–≤–æ—è –ø–æ–¥—Ä—É–∂–∫–∞ üå∏\n".
            "–†–∞–¥–∞, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª–∞ –∫–æ –º–Ω–µ. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π ‚Äî —è —Ä—è–¥–æ–º, —á—Ç–æ–±—ã —Å–ª—É—à–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å.\n".
            "–ë–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏–π, –±–µ–∑ –º–∞—Å–æ–∫ ‚Äî —Ç–æ–ª—å–∫–æ —Ç—ë–ø–ª—ã–π –¥–∏–∞–ª–æ–≥.\n".
            "–•–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ? –ñ–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª üíå\n\n".
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è).";
        $this->tg->sendMessage($chatId, $text, [['–°—Ç–∞—Ä—Ç']]);
    }

    protected function showMainMenu(int $chatId, User $user)
    {
        $name = $user->name ? $user->name : '–ü–æ–¥—Ä—É–≥–∞';
        $text = "{$name}, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üí´\n–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ.";
        $keyboard = [
            ['üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ', 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è'],
            ['‚ôí –ì–æ—Ä–æ—Å–∫–æ–ø', 'üí¨ –ü–æ–¥—Ä—É–∂–∫–∞'],
            ['–ü–æ–¥–ø–∏—Å–∫–∞', '–ü–æ–º–æ—â—å']
        ];
        $this->tg->sendMessage($chatId, $text, $keyboard);
    }

    protected function routeMainMenu($session, User $user, int $chatId, string $text)
    {
        switch ($text) {
            case 'üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ':
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é —Ç–∞—Ä–æ
                $this->tg->sendMessage($chatId, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:", [
                    ['–¢–∞—Ä–æ –Ω–∞ –¥–µ–Ω—å', '–¢–∞—Ä–æ –Ω–∞ –ª—é–±–æ–≤—å'],
                    ['–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
                ]);
                $session->state = 'taro_menu';
                break;

            case 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è':
                if (!$user->surname) {
                    $this->tg->sendMessage($chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:');
                    $session->state = 'numerology_ask_surname';
                } else {
                    $this->showNumerologyMenu($chatId, $user);
                    $session->state = 'numerology_menu';
                }
                break;
            case '‚ôí –ì–æ—Ä–æ—Å–∫–æ–ø':
            case 'üí¨ –ü–æ–¥—Ä—É–∂–∫–∞':
            case '–ü–æ–¥–ø–∏—Å–∫–∞':
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –∑–∞–≥–ª—É—à–∫–∏ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ)
                $this->tg->sendMessage($chatId, "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –ø–æ–∑–∂–µ.", [['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]);
                break;

            case '–ü–æ–º–æ—â—å':
                $this->tg->sendMessage($chatId,
                    "–Ø –ø–æ–º–æ–≥—É:\n‚Ä¢ –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ –¢–∞—Ä–æ\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ (3 –∫–∞—Ä—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ) –∏–ª–∏ –≥–ª—É–±–æ–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ (7 –∫–∞—Ä—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)\n\n".
                    "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ ¬´üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ¬ª –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–º.");
                break;

            default:
                $this->showMainMenu($chatId, $user);
                break;
        }
    }

    protected function routeTaroMenu($session, User $user, int $chatId, string $text)
    {
        if ($text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
            $this->showMainMenu($chatId, $user);
            $session->state = 'main_menu';
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
        $type = $text; // –¢–∞—Ä–æ –Ω–∞ –¥–µ–Ω—å / –¢–∞—Ä–æ –Ω–∞ –ª—é–±–æ–≤—å / –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
        $session->data = array_merge($session->data ?? [], ['taro_type' => $type]);

        // –ü—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–Ω–æ–ø–∫–∏
        $suggest = "–û—Ç–ª–∏—á–Ω–æ ‚Äî –º—ã –≤—ã–±—Ä–∞–ª–∏: <b>{$type}</b>.\n\n".
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã:\n".
            "‚úÖ ¬´–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ —É –ù–∏–∫–∏—Ç—ã –∫–æ –º–Ω–µ?¬ª\n".
            "‚úÖ ¬´–ë—É–¥–µ–º –ª–∏ –º—ã –≤–º–µ—Å—Ç–µ —Å –ù–∏–∫–∏—Ç–æ–π?¬ª\n".
            "‚ùå –ù–µ: ¬´–ß—Ç–æ –º–µ–Ω—è –∂–¥–µ—Ç —Å –Ω–∏–º?¬ª ‚Äî —Å–ª–∏—à–∫–æ–º –æ–±—â–µ–µ.\n\n".
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å¬ª –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞.";
        $this->tg->sendMessage($chatId, $suggest, [
            ['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
            ['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ]);

        // –û–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        $session->state = 'taro_ask_question';
    }

    protected function handleTaroQuestion($session, User $user, int $chatId, string $text)
    {
        if ($text === '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
            $this->showMainMenu($chatId, $user);
            $session->state = 'main_menu';
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
        $cards = ($user->subscription === 'paid') ? 7 : 3;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        if ($user->subscription !== 'paid') {
            $freeUsedToday = TaroReading::where('chat_id', $user->chat_id)
                ->whereDate('created_at', now()->toDateString())
                ->where('cards_count', 3)
                ->count();

            if ($freeUsedToday >= 3) {
                $this->tg->sendMessage($chatId,
                    "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –≤—Å–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üå∏\n\n" .
                    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (7 –∫–∞—Ä—Ç –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏).",
                    [['–ü–æ–¥–ø–∏—Å–∫–∞', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]
                );
                $session->state = 'main_menu';
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 7 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å)
        if ($user->subscription === 'paid') {
            $paidUsedToday = TaroReading::where('chat_id', $user->chat_id)
                ->whereDate('created_at', now()->toDateString())
                ->where('cards_count', 3)
                ->count();

            // TODO –≤—ã–Ω–æ—Å–∏–º –≤ –ë–î
            // –ü—Ä–∏–º–µ—Ä: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å
            if ($paidUsedToday >= 10) {
                $this->tg->sendMessage($chatId,
                    "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –≤—Å–µ 10 –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üå∏\n\n" .
                    "–ó–∞–≤—Ç—Ä–∞ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è.",
                    [['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]
                );
                $session->state = 'main_menu';
                return;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
        $type = $session->data['taro_type'] ?? '–†–∞—Å–∫–ª–∞–¥';

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –≤—ã–∑—ã–≤–∞–µ–º AI
        $prompt = $this->buildTaroPrompt($user->name ?? '–ü–æ–¥—Ä—É–≥–∞', $type, $text, $cards);

        // –ú—è–≥–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        $this->tg->sendMessage($chatId, "–°–µ–π—á–∞—Å —è –ø–æ—Å–æ–≤–µ—Ç—É—é—Å—å —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ —Å–æ–±–µ—Ä—É —Ä–∞—Å–∫–ª–∞–¥ ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚ú®");

        $result = $this->ai->getAnswer($prompt);

        if (!$result) {
            $result = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –∫ —ç—Ç–æ–º—É —á—É—Ç—å –ø–æ–∑–∂–µ.";
        }

        if (mb_strlen($result) > 4000) {
            $result = mb_substr($result, 0, 4000) . '...';
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        $final = "–°–ø–∞—Å–∏–±–æ, {$user->name}, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º üå∏\n\n" .
            "<b>–í–æ–ø—Ä–æ—Å:</b> {$text}\n\n" .
            "<b>–†–∞—Å–∫–ª–∞–¥ ({$cards} –∫–∞—Ä—Ç—ã):</b>\n" .
            "{$result}\n\n" .
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å—Å—è ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â—ë —É–≥–ª—É–±–∏—Ç—å—Å—è, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é (7 –∫–∞—Ä—Ç –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏).";

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        TaroReading::create([
            'chat_id' => $user->chat_id,
            'user_name' => $user->name,
            'birth_date' => $user->birth_date,
            'type' => $type,
            'question' => $text,
            'cards_count' => $cards,
            'result' => $result,
            'meta' => [
                'generated_at' => now()->toDateTimeString(),
                'prompt' => $this->shorten($prompt, 800),
            ],
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        $keyboard = $user->subscription === 'paid'
            ? [['–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]
            : [['–ü–æ–¥–ø–∏—Å–∫–∞', '–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å'], ['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']];

        $this->tg->sendMessage($chatId, $final, $keyboard);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        $session->state = 'taro_menu';
    }

    protected function showNumerologyMenu(int $chatId, User $user)
    {
        $text = '–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞:';
        $keyboard = [
            ['–ë–µ—Å–ø–ª–∞—Ç–Ω–æ', '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'],
            ['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ];
        $this->tg->sendMessage($chatId, $text, $keyboard);
    }

    protected function routeNumerologyMenu($session, User $user, int $chatId, string $text)
    {
        switch ($text) {
            case '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ':
                $this->handleNumerologyFree($session, $user, $chatId);
                break;

            case '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑':
                $this->handleNumerologyPaid($session, $user, $chatId);
                break;

            case '–ü–æ–¥–ø–∏—Å–∫–∞':
                $this->tg->sendMessage($chatId, '–í—ã–±–æ—Ä –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', [['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]);
                break;

            case '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
                $this->tg->sendMessage($chatId, '–§—É–Ω–∫—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.', [['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]);
                break;

            case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
                $this->showMainMenu($chatId, $user);
                $session->state = 'main_menu';
                break;

            default:
                $this->showNumerologyMenu($chatId, $user);
                break;
        }
    }

    protected function handleNumerologyFree($session, User $user, int $chatId)
    {
        $prompt = $this->buildMoneyCodePrompt($user->name ?? '', $user->birth_date);
        $this->tg->sendMessage($chatId, '–°—á–∏—Ç–∞—é —Ç–≤–æ–π –¥–µ–Ω–µ–∂–Ω—ã–π –∫–æ–¥, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚ú®');
        $result = $this->ai->getAnswer($prompt);

        if (!$result) {
            $result = '–°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.';
        }

        if (mb_strlen($result) > 4000) {
            $result = mb_substr($result, 0, 4000) . '...';
        }

        $final = $result . "\n\n" .
            '–≠—Ç–æ —Ç–≤–æ–π –¥–µ–Ω–µ–∂–Ω—ã–π –∫–æ–¥. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏. üí∏\n' .
            '–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞–∑–±–æ—Ä: —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑–æ–±–∏–ª–∏—è. ‚ú®\n' .
            'üëâ –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç.';

        $this->tg->sendMessage($chatId, $final, [['–ü–æ–¥–ø–∏—Å–∫–∞', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]);

        NumerologyReading::create([
            'chat_id' => $user->chat_id,
            'user_name' => $user->name,
            'surname' => $user->surname,
            'birth_date' => $user->birth_date,
            'type' => 'money_code',
            'result' => $result,
            'meta' => [
                'generated_at' => now()->toDateTimeString(),
                'prompt' => $this->shorten($prompt, 800),
            ],
        ]);

        $session->state = 'numerology_menu';
    }

    protected function handleNumerologyPaid($session, User $user, int $chatId)
    {
        if ($user->subscription !== 'paid') {
            $this->tg->sendMessage($chatId,
                '–ü–æ–¥—Ä–æ–±–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.',
                [['–ü–æ–¥–ø–∏—Å–∫–∞', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]
            );
            $session->state = 'numerology_menu';
            return;
        }

        $birth = $user->birth_date ? Carbon::parse($user->birth_date)->format('d.m.Y') : '';
        $prompt = $this->buildNumerologyPrompt($user->name ?? '', $user->surname ?? '', $birth);
        $this->tg->sendMessage($chatId, '–°–æ–±–∏—Ä–∞—é —Ç–≤–æ—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å ‚ú®');
        $result = $this->ai->getAnswer($prompt);

        if (!$result) {
            $result = '–°–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.';
        }

        if (mb_strlen($result) > 4000) {
            $result = mb_substr($result, 0, 4000) . '...';
        }

        $this->tg->sendMessage($chatId, $result, [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']]);

        NumerologyReading::create([
            'chat_id' => $user->chat_id,
            'user_name' => $user->name,
            'surname' => $user->surname,
            'birth_date' => $user->birth_date,
            'type' => 'full',
            'result' => $result,
            'meta' => [
                'generated_at' => now()->toDateTimeString(),
                'prompt' => $this->shorten($prompt, 800),
            ],
        ]);

        $session->state = 'numerology_menu';
    }

    /* ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ---------- */

    protected function isPositive(string $text): bool
    {
        $t = mb_strtolower($text);
        return in_array($t, ['—Å—Ç–∞—Ä—Ç', '–¥–∞', 'ok', 'okey', '–Ω–∞—á–∞—Ç—å', 'start', '–¥–∞–≤–∞–π', '–≥–æ—Ç–æ–≤–æ']);
    }

    protected function validateDate(string $text): bool
    {
        if (!preg_match('/^\d{2}\.\d{2}\.\d{4}$/', $text)) return false;
        try {
            $d = Carbon::createFromFormat('d.m.Y', $text);
            return checkdate($d->month, $d->day, $d->year);
        } catch (\Throwable $e) {
            return false;
        }
    }

    protected function buildMoneyCodePrompt(string $name, ?string $birthDate): string
    {
        $birth = $birthDate ? Carbon::parse($birthDate)->format('d.m.Y') : '';
        return "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ {$name} –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è {$birth} –≤—ã—á–∏—Å–ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–π (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π) –∫–æ–¥. " .
            "–í–µ—Ä–Ω–∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏.";
    }

    protected function buildNumerologyPrompt(string $name, string $surname, string $birthDate): string
    {
        $system = "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏.";
        $instruction = "–†–∞—Å—Å—á–∏—Ç–∞–π –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –ø–æ –∏–º–µ–Ω–∏ {$name}, —Ñ–∞–º–∏–ª–∏–∏ {$surname} –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è {$birthDate}. " .
            "–£–∫–∞–∂–∏ —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, —á–∏—Å–ª–æ —Å—É–¥—å–±—ã, —á–∏—Å–ª–æ –¥—É—à–∏, —á–∏—Å–ª–æ –ª–∏—á–Ω–æ—Å—Ç–∏, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–≥–∏ –∏ –∑–∞–¥–∞—á–∏, –º–∞—Ç—Ä–∏—Ü—É –ü–∏—Ñ–∞–≥–æ—Ä–∞. " .
            "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç: –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–∞ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –≤–ª–∏—è–Ω–∏–µ–º, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ 700-1500 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —Å—Ñ–µ—Ä–∞–º (–ª–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –∫–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–µ–º—å—è, —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∂–∏–∑–Ω–∏).";

        return $system . "\n\n" . $instruction;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI –¥–ª—è —Ç–∞—Ä–æ-—Ä–∞—Å–∫–ª–∞–¥–∞ (—á—ë—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã).
     */
    protected function buildTaroPrompt(string $name, string $type, string $question, int $cards): string
    {
        $system = "–¢—ã ‚Äî –Ω–µ–∂–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç–∞—Ä–æ–ª–æ–≥, –≥–æ–≤–æ—Ä–∏—à—å –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏.";
        $instruction = "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$name} —Å–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ \"{$type}\" –Ω–∞ {$cards} –∫–∞—Ä—Ç(—ã). " .
            "–î–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ), –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –∏ –æ–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ —Ä–∞—Å–∫–ª–∞–¥—É (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤). " .
            "–°—Ç–∏–ª—å: –º—è–≥–∫–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–∏ 2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. " .
            "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´{$question}¬ª.";
        // –°–æ–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π prompt, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–º –≤ user role (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ system/user messages)
        return $system . "\n\n" . $instruction;
    }

    protected function shorten(string $text, int $limit = 200)
    {
        return mb_strlen($text) <= $limit ? $text : mb_substr($text, 0, $limit) . '...';
    }
}
